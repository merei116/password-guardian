import{g as p}from"./storage-XNlvAFHd.js";import{o as k}from"./index-Dob3nYDb.js";function g(t){return t.split("").map(n=>/[A-Za-z]/.test(n)?"X":/\d/.test(n)?"D":/[!@#$%^&*()\-_=+]/.test(n)?"S":"_").join("")}function b(t,n,u){var d;if(!t)return{score:"WEAK",matches:[]};const l=t.toLowerCase(),s=u.filter(i=>l.includes(i)).slice(0,5),o=Object.keys(n.words||{}).filter(i=>l.includes(i)).slice(0,5),r=g(t),a=((d=n.masks)==null?void 0:d[r])||0;let e=0;t.length>=12?e+=30:t.length>=8?e+=15:e+=5,/[A-Z]/.test(t)&&/[a-z]/.test(t)&&(e+=15),/\d/.test(t)&&(e+=15),/[!@#$%^&*()\-_=+]/.test(t)&&(e+=15),a>=50?e-=30:a>=10?e-=20:a>=3&&(e-=10),s.length>0&&(e-=20),o.length>0&&(e-=30);let c="WEAK";return e>=70?c="STRONG":e>=40&&(c="MED"),{score:c,matches:[...s,...o]}}async function v(){try{return await(await fetch(chrome.runtime.getURL("src/assets/patterns.json"))).json()}catch(t){return console.error("Ошибка при загрузке patterns.json:",t),{}}}async function j(){if(!await p("hasPatterns"))return{};try{return await(await k("pg-store",1)).get("patterns","profile")||{}}catch(n){return console.error("Ошибка при загрузке динамических паттернов:",n),{}}}(async()=>{const t=await v();await j();const u=(await p("keywords")||[]).map(s=>s.toLowerCase());function l(){document.querySelectorAll('input[type="password"]:not([data-pg])').forEach(s=>{s.dataset.pg="1";const o=document.createElement("span");o.className="pg-badge WEAK",o.textContent="…";const r=document.createElement("div");r.className="pg-keywords",r.style.fontSize="0.75rem",r.style.color="#999",r.style.marginLeft="8px",s.after(o,r),s.addEventListener("input",()=>{var h;const a=s.value,e=b(a,t,u),c=g(a),d=((h=t.masks)==null?void 0:h[c])||0,i=e.matches,y=u.slice(0,5),f=(t.password_counts||{})[a]||0,m=[];i.length>0&&m.push(`⚠️ Matches found: ${i.join(", ")}`),d>0&&m.push(`⚠️ The mask "${c}" has been encountered ${d} times`),f>1&&m.push(`❗ The password has been found ${f} times in the history`),o.textContent=e.score,o.className="pg-badge "+e.score,r.innerHTML=`
            <div><strong>Keywords:</strong> ${y.join(", ")}</div>
            ${m.map(w=>`<div>${w}</div>`).join("")}
          `})})}l(),new MutationObserver(l).observe(document.documentElement,{childList:!0,subtree:!0}),chrome.runtime.onMessage.addListener(s=>{s.type==="hotReloadPatterns"&&Object.assign(t,s.patterns)})})();
